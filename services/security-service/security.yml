# *****************************************************************************
#
# Copyright (c) 2016, EPAM SYSTEMS INC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ******************************************************************************

<#include "ssn.yml">

ldapUseConnectionPool: false
ldapConnectionConfig:
#  ldapHost: localhost
  ldapHost: LDAP_HOST
#  ldapPort: 3890
  ldapPort: 389
  name: LDAP_USER
  credentials: LDAP_PASS
useLdapBindTemplate: true
ldapBindTemplate: uid=%s,ou=People,dc=example,dc=com
ldapBindAttribute: uid
ldapSearchAttribute: uid
ldapSearch:
  - name: userLookUp
    cache: true
    expirationTimeMsec: 600000
    scope: SUBTREE
    attributes:
      - cn
      - mail
      - uid
      - gidNumber
    timeLimit: 0
    base: dc=example,dc=com
    filter: "(&(objectClass=inetOrgPerson)(uid=%uid%))"
  - name: userInfo
    cache: true
    expirationTimeMsec: 600000
    scope: SUBTREE
    attributes:
      - cn
      - gidNumber
    timeLimit: 0
    base: dc=example,dc=com
    filter: "(&(objectClass=inetOrgPerson)(uid=%uid%))"
    searchResultProcessor:
      language: python
#      path: c:\tmp\enrich.py
      code: |
        def enrichUserInfo(ui,context):
          name = ui.getName()
          key = context['key'].lower()
          userInfo=context['userInfo']
          if not key in userInfo:
            raise Exception('Python LDAP UserInfo not found for '+key)
          uid= userInfo[key]
          cn = context['userInfo'][key]['cn'].split(' ')
          ui.setFirstName(cn[0])
          ui.setLastName(cn[1])
          return ui
  - name: groupInfo
    cache: true
    expirationTimeMsec: 600000
    scope: SUBTREE
    attributes:
      - cn
      - mail
      - gidNumber
      - memberUid
    timeLimit: 0
    base: dc=example,dc=com
    filter: "(&(objectClass=posixGroup))"
    searchResultProcessor:
      language: javascript
#      path: c:\tmp\enrich.js
      code: |
        var enrichUserInfo = function(ui,context) {
          name = ui.getName();
          key = context['key'].toLowerCase();
          userInfo=context['userInfo'];
          if( userInfo[key] == undefined ) {
            throw 'JavaScript LDAP UserInfo not found for '+key;
          }
          uid= userInfo[key];
          userGid = uid['gidnumber'];
          groupInfo=context['groupInfo'];
          for( dn in groupInfo ) {
            group = groupInfo[dn];
            if( userGid == group['gidnumber']) {
              ui.addRole(group['cn']);
            } else {
                grMembers = group['memberuid'];
                if (grMembers != undefined) {
                  index = grMembers.split(",");
                  members = new Array();
                  for(i in index) {
                    members[i] = grMembers.split(",")[i];
                  }
                  for (member in members) {
                    if (members[member] != undefined) {
                      if (members[member].toLowerCase() == name.toLowerCase()) {
                        ui.addRole(group['cn']);
                      }
                    }
                  }
                }
              }
          }
          return ui;
        }

server:
  requestLog:
    appenders:
      - type: file
        currentLogFilename: ${LOG_ROOT_DIR}/ssn/request-security.log
        archive: true
        archivedLogFilenamePattern: ${LOG_ROOT_DIR}/ssn/request-security-%d{yyyy-MM-dd}.log.gz
        archivedFileCount: 10
  applicationConnectors:
    - type: https
      port: 8090
      certAlias: dlab
      keyStorePath: ${KEY_STORE_PATH}
      keyStorePassword: ${KEY_STORE_PASSWORD}
      trustStorePath: ${TRUST_STORE_PATH}
      trustStorePassword: ${TRUST_STORE_PASSWORD}
  adminConnectors:
    - type: https
      port: 8091
      certAlias: dlab
      keyStorePath: ${KEY_STORE_PATH}
      keyStorePassword: ${KEY_STORE_PASSWORD}
      trustStorePath: ${TRUST_STORE_PATH}
      trustStorePassword: ${TRUST_STORE_PASSWORD}

userInfoPersistenceEnabled: true

<#if CLOUD_TYPE == "aws">
awsUserIdentificationEnabled: true
loginAuthenticationTimeout: 10
<#elseif CLOUD_TYPE == "azure">
loginAuthenticationTimeout: 20

# Azure login configuration
azureLoginConfiguration:
    # defines of LDAP server is used as authentication point, if false Azure OAuth authentication should be configured
    useLdap: <LOGIN_USE_LDAP>
    # Tenant id in Azure
    tenant: <LOGIN_TENANT_ID>
    # Authority url
    authority: https://login.microsoftonline.com/
    # Id of the application that logs in users
    clientId: <LOGIN_APPLICATION_ID>
    # Redirect url for OAuth2 Authorization code flow
    redirectUrl: https://<LOGIN_APPLICATION_REDIRECT_URL>/
    # defines if DLab checks user permission to the configured permissionScope(true|false).
    # If user does not have permissions(no Role assigned in permissionScope) he/she will not be logged in DLab
    validatePermissionScope: <VALIDATE_PERMISSION_SCOPE>
    # Scope for validation user permissions if validatePermissionScope: true
    permissionScope: <PERMISSION_SCOPE>
    # Authentication file that used for validation user permissions(query Microsoft API)
    managementApiAuthFile: <MANAGEMENT_API_AUTH_FILE>
     # defines how authorization code is sent to DLab
    responseMode: query
    # Type of consent that requires interaction with user(consent,login are allowed)
    prompt: consent
    # Defines if try to log in user silently without user interaction (with "none" prompt). if false start with configured prompt
    silent: true
    # login page of DLab
    loginPage: https://<LOGIN_PAGE>/

<#elseif CLOUD_TYPE == "gcp">

# GCP oauth2 login configuration
gcpLoginConfiguration:
    oauth2authenticationEnabled: false
    clientId: <GCP_CLIENT_ID>
    clientSecret: <GCP_CLIENT_SECRET>
    redirectedUri: https://<GCP_REDIRECTED_URL>
    userStateCacheExpirationTime: 1
    userStateCacheSize: 1000
    applicationName: DLAB-webapp
</#if>


logging:
  level: INFO
  loggers:
    io.dropwizard: INFO
    com.epam: DEBUG
    com.aegisql: INFO
  appenders:
#<#if DEV_MODE == "true">
    - type: console
#</#if>
    - type: file
      currentLogFilename: ${LOG_ROOT_DIR}/ssn/security.log
      archive: true
      archivedLogFilenamePattern: ${LOG_ROOT_DIR}/ssn/security-%d{yyyy-MM-dd}.log.gz
      archivedFileCount: 10
